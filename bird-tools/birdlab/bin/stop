#!/bin/bash
. $(dirname $(readlink -f $0))/virt-lib

NAME=$1
shift

if [ -z "$NAME" ]; then
	echo -e "Usage: $0 name\n    or $0 -m list of names"
	exit 2
fi

if [ "$NAME" = "-m" ]; then
	set -e
  declare -a PIDS
	for N in "$@"; do
		echo Stopping "$N"
		$0 -q "$N" &
    PIDS+=($!)
	done

  echo ${PIDS[@]}

  while true; do
    declare -a NEWPIDS
    NEWPIDS=()
    for P in ${PIDS[@]}; do
      if [ -d /proc/$P ]; then
        NEWPIDS+=($P)
      fi
    done
    PIDS=( ${NEWPIDS[@]} )
    if [ "${#PIDS[@]}" -eq 0 ]; then break; fi
    echo -e "Still ${#PIDS[@]} machine(s) running ... \r"
    sleep 1
  done
  echo "Everything OK.                               "
	exit 0 
fi

QUIET=false
if [ "$NAME" = "-q" ]; then
  QUIET=true
  NAME=$1
  shift
fi

function ok() {
	E
	rm -f $ROOT/run/$NAME.sock $ROOT/run/$NAME.pid

	if gethost $NAME; then
    echo "$NAME"
    if [ -e $ROOT/run/tmp-$NAME ]; then rm $(readlink -f $ROOT/run/tmp-$NAME) $ROOT/run/tmp-$NAME; fi
		$ROOT/bin/omapi del $HOSTMAC
		vsctl del-port $HOSTTAP
		if [ -n "$HOSTNIC" ]; then
			for N in ${HOSTNIC[@]}; do
				IFS=';' read _ MAC TAG _ <<<"$N"
				TAPID=$(mactotap $MAC)
				E $TAPID
        brctl delif br-$TAG $TAPID
#				vsctl del-port $TAPID
			done
		fi
	else
		E "Warning: Config not found for this host"
	fi
	E "OK"
	exit 0
}

if [ -e $ROOT/run/$NAME.sock ]; then
	E -n "Graceful powerdown "
	echo "system_powerdown" | socat - UNIX-CONNECT:$ROOT/run/$NAME.sock >/dev/null
	if wait_pidfile $ROOT/run/$NAME.pid 30; then ok; fi
else
	E "No monitor socket found."
fi

if [ -e $ROOT/run/$NAME.pid ]; then
	if [ ! -d /proc/$(<$ROOT/run/$NAME.pid) ]; then
		E "Stale pidfile found, cleaning up"
		rm $ROOT/run/$NAME.pid
		return 0
	fi

	E -n "Sending TERM "
	kill -15 $(<$ROOT/run/$NAME.pid)
	
	if wait_pidfile $ROOT/run/$NAME.pid 30; then ok; fi

	E -n "Sending KILL "
	kill -9 $(<$ROOT/run/$NAME.pid)
	
	if wait_pidfile $ROOT/run/$NAME.pid 30; then ok; fi

	E "Did not stop even after KILL, strange."
	exit 1
fi
