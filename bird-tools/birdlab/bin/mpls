#!/bin/bash
. $(dirname $(readlink -f $0))/virt-lib

set -e

EVENT=$1
shift

idtoip() {
  echo 10.255.$(($1 / 254)).$(($1 % 254))
}

idtolink() {
  echo 10.254.$(($1 / 254)).$(($1 % 254))
}

if ! brctl show | grep -q br-mpls; then brctl addbr br-mpls; ip link set br-mpls up; fi

case $EVENT in
  add-rr|add-p|add-pe)
    T=${EVENT##add-}
    id=$1
    ip=$(idtoip $id)
    vctl start -t mpls-auto $T-$id
    gethost mpls-auto-$T-$id
    vctl serial-mikrotik-fix.pl mpls-auto-$T-$id
    vctl ssh mpls-auto-$T-$id -t <<EOF
/interface bridge add name=lo
/ip address add address=$ip/32 interface=lo
/routing ospf instance set distribute-default=never redistribute-connected=as-type-1 router-id=$ip 0
/routing ospf network add network=$ip/32 area=backbone
EOF
    if [ "$EVENT" != "add-rr" ]; then
      echo "/mpls ldp set enabled=yes lsr-id=$ip transport-address=$ip" | vctl ssh mpls-auto-$T-$id -t
    fi

    ;;
  add-c)
    id=$1
    vpn=$2
    pe=$3
    ip=$(idtoip $id)
    peip=$(idtoip $pe)
    linkip=$(idtolink $id)
    linkpeip=$(idtolink $pe)
    vctl start -t mpls-auto c-$id
    gethost mpls-auto-c-$id
    cip=$HOSTIP4
    gethost mpls-auto-pe-$pe
    cpeip=$HOSTIP4
    vctl serial-mikrotik-fix.pl mpls-auto-c-$id

    vctl ssh mpls-auto-c-$id -t <<EOF
/interface bridge add name=lo
/ip address add address=$ip/32 interface=lo
/interface gre add remote-address=$cpeip name=pe-$pe
/ip address add address=$linkip/32 network=$linkpeip interface=pe-$pe
/routing ospf instance set distribute-default=never redistribute-connected=as-type-1 router-id=$ip 0
/routing ospf network add network=$ip/32 area=backbone
/routing ospf network add network=$linkpeip/32 area=backbone
EOF

    vctl ssh mpls-auto-pe-$pe -t <<EOF
/interface gre add remote-address=$cip name=c-$id
/ip address add address=$linkpeip/32 network=$linkip interface=c-$id
/ip route vrf add routing-mark=$vpn interfaces=c-$id route-distinguisher=$vpn import-route-targets=$vpn export-route-targets=$vpn
/routing bgp instance vrf add instance=default routing-mark=$vpn redistribute-connected=yes redistribute-ospf=yes
/routing ospf instance add name=c-$id routing-table=$vpn redistribute-bgp=as-type-1
/routing ospf area add instance=c-$id name=c-$id
/routing ospf network add network=$linkip/32 area=c-$id

EOF
    ;;
  add-link)
    from=$1
    to=$2
    fip=$(idtolink ${from##*-})
    tip=$(idtolink ${to##*-})
    gethost mpls-auto-$from
    cfip=$HOSTIP4
    gethost mpls-auto-$to
    ctip=$HOSTIP4

    vctl ssh mpls-auto-$from -t <<EOF
/interface gre add remote-address=$ctip name=$to
/ip address add address=$fip/32 network=$tip interface=$to
/routing ospf network add network=$tip/32 area=backbone
EOF

    vctl ssh mpls-auto-$to -t <<EOF
/interface gre add remote-address=$cfip name=$from
/ip address add address=$tip/32 network=$fip interface=$from
/routing ospf network add network=$fip/32 area=backbone
EOF

    case "$from$to" in
      *rr*) :
        ;;
      *)
        echo "/mpls ldp interface add interface=$to" | vctl ssh mpls-auto-$from -t
        echo "/mpls ldp interface add interface=$from" | vctl ssh mpls-auto-$to -t
        ;;
    esac

    ;;
  bgp-rr)
    pe=$1
    rr=$2
    peip=$(idtoip $pe)
    rrip=$(idtoip $rr)

    echo "/routing bgp peer add remote-address=$rrip remote-as=65530 address-families=vpnv4 update-source=lo" | vctl ssh mpls-auto-pe-$pe -t
    echo "/routing bgp peer add remote-address=$peip remote-as=65530 address-families=vpnv4 update-source=lo route-reflect=yes" | vctl ssh mpls-auto-rr-$rr -t
    ;;
  bgp-link)
    from=$1
    to=$2
    fip=$(idtoip ${from})
    tip=$(idtoip ${to})

    echo "/routing bgp peer add remote-address=$tip remote-as=65530 address-families=vpnv4 update-source=lo" | vctl ssh mpls-auto-rr-$from -t
    echo "/routing bgp peer add remote-address=$fip remote-as=65530 address-families=vpnv4 update-source=lo" | vctl ssh mpls-auto-rr-$to -t
    ;;

  *)
    echo "Commands: add-rr ID, add-p ID, add-pe ID, add-c ID VPN PE, add-link FROM TO, bgp-rr PE RR"
    exit 2
    ;;
esac
