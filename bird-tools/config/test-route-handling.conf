# Run Bird with this config file to test route propagation.
router id 127.0.0.1;

log "test-route-handling.log" all;
debug protocols all;

define lm = 321;
define xm = 654;

protocol device {}

ipv4 table tab1;
ipv4 table tab2;

function myset(int rm; int igm; int honey; clist cl) {
  rip_metric = rm;
  igp_metric = igm;
  bgp_med = honey;
  bgp_community = cl;
  bgp_community.delete((xm, lm));
};

function set_init() {
  myset(42, 4, 123, -empty-);
}

function mycheck(string wh; int rm; int igm; int honey; clist cl; pair cladd) {
  print "Check in ", wh, " for net ", net;

  if (rip_metric != rm) then {
    print"Error in rip_metric, is ", rip_metric, " should be ", rm;
    quitbird;
  }
  else print "RIP metric OK";

  if (igp_metric != igm) then {
    print"Error in igp_metric, is ", igp_metric, " should be ", igm;
    quitbird;
  }
  else print "IGP metric OK";

  if (bgp_med != honey) then {
    print"Error in bgp_med, is ", bgp_med, " should be ", honey;
    quitbird;
  }
  else print "MED OK";

  if (bgp_community != cl) then {
    print"Error in bgp_community, is ", bgp_community, " should be ", cl;
    quitbird;
  }
  else print "Community OK";

  myset(rm + 1, igm + 1, honey + 1, add(cl, cladd));

  print "Update OK";
  accept;
};

# Generate the routes to test
protocol static {
  ipv4 {
    table tab1;
    export none;
    import filter {
      if ( net ~ 10.20.0.0/22 ) then {
	print("This message should repeat 3 times.");
      }

      mycheck("static", 42, 4, 123, -empty-, (1, 2));
    };
  };

# Fix the nexthops to something real,
  route 10.20.1.0/24 via "lo" { set_init(); };
  route 10.20.2.0/24 via "lo" { set_init(); };
  route 10.20.3.0/24 via "lo" { set_init(); };
  route 10.20.4.0/24 via "lo" { set_init(); };
}

# Pipe them somewhere else to test more filtering
protocol pipe p1 {
  table tab1;
  peer table tab2;
  export filter {
    mycheck("p1", 43, 5, 124, add(-empty-, (1, 2)), (3, 4));
  };
}
